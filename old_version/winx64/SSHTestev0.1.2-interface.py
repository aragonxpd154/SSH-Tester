import tkinter
from tkinter import *
from tkinter import messagebox
import sys
import os
import requests #Instalação pip install requests
from html.parser import HTMLParser #Instalação pip install HTMLParser
#Pacote HTMLParser-0.0.2 instalado
import webbrowser
import re
import tkinter as Tkinter  
import tkinter.ttk as ttk
import time
import base64


gui = Tk()
gui.geometry("700x550")
#ICONE PROGRAMA EM SI
iconBase64=("""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AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ExMT/4yMjP+hoaH/n5+f/5+fn/+fn5//n5+f/5+fn/+goKD/l5eX/yIiIv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8XFxf/o6Oj/7u7u/+6urr/urq6/7q6uv+6urr/urq6/7u7u/+wsLD/KCgo/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/yMjI/85OTn/CQkJ/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAf8FBQX/BgYG/wYGBv8GBgb/BgYG/wYGBv8GBgb/BgYG/wYGBv8BAQH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/VlZW/+/v7/+0tLT/W1tb/xgYGP8BAQH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8kJCT/nZ2d/+fn5//8/Pz/1NTU/4GBgf8vLy//BQUF/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8EBAT/KSkp/3d3d//MzMz/+Pj4/+jo6P+mpqb/R0dH/wMDA/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/xYWFv98fHz/8fHx///////Kysr/Dw8P/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/w8PD/9ISEj/np6e/+Tk5P/39/f/y8vL/2lpaf8FBQX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/xUVFf9ubm7/xMTE//j4+P/v7+//rKys/1NTU/8TExP/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAA/wAAAP8AAAD/VlZW//r6+v/Z2dn/h4eH/zQ0NP8HBwf/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/QAAAOoAAAD/AAAA/wAAAP81NTX/YmJi/xwcHP8BAQH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADrAAAArgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAK4AAABAAAAA4wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADjAAAAPwAAAAEAAABaAAAA5AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA5AAAAFoAAAABAAAAAAAAAAIAAAA/AAAArgAAAOsAAAD9AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAA6wAAAK4AAAA/AAAAAgAAAACAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAASgAAAAwAAAAYAAAAAEAIAAAAAAAACQAABMLAAATCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAPAAAAJkAAADYAAAA9AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9AAAANgAAACZAAAAPAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAACDAAAA6AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6AAAAIIAAAASAAAAAAAAAAAAAAAAAAAAEgAAAKIAAAD9AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP0AAACiAAAAEgAAAAAAAAADAAAAgwAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAAgwAAAAMAAAA9AAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8CAgL/ExMT/y8vL/9AQED/QUFB/zk5Of8XFxf/AQEB/wAAAP8AAAD/AgIC/xYWFv8yMjL/QEBA/0FBQf84ODj/FhYW/wEBAf8AAAD/AAAA/wkJCf8hISH/IiIi/xAQEP8AAAD/AAAA/wAAAP8WFhb/IiIi/x4eHv8FBQX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA5wAAAD0AAACYAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wMDA/9wcHD/z8/P/+3t7f/5+fn/+fn5//T09P/R0dH/cXFx/wwMDP8FBQX/e3t7/9PT0//v7+//+fn5//n5+f/09PT/z8/P/2tra/8KCgr/AAAA/z09Pf/a2tr/5OTk/2xsbP8AAAD/AAAA/wEBAf+RkZH/5+fn/8rKyv8hISH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAJgAAADXAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wcHB/+3t7f//////+Hh4f+5ubn/sLCw/8/Pz//7+/v/+/v7/3x8fP8ODg7/xMTE///////f39//ubm5/7Kysv/U1NT//f39//n5+f9zc3P/AAAA/0VFRf/39/f//////3t7e/8AAAD/AAAA/wICAv+kpKT//////+Xl5f8lJSX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANgAAADzAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wcHB/+UlJT/eXl5/yMjI/8GBgb/AAAA/x0dHf/MzMz//////9TU1P8kJCT/nJyc/3Nzc/8hISH/BQUF/wAAAP8lJSX/19fX///////MzMz/Dg4O/0RERP/39/f//////3p6ev8AAAD/AAAA/wICAv+kpKT//////+Xl5f8lJSX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPUAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wICAv8RERH/AgIC/wUFBf8jIyP/RkZG/4ODg//t7e3//////9/f3/8iIiL/EBAQ/wEBAf8HBwf/JiYm/0lJSf+Li4v/8fHx///////X19f/FRUV/0RERP/39/f//////3p6ev8AAAD/AAAA/wICAv+jo6P//////+Xl5f8lJSX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8CAgL/Q0ND/6mpqf/h4eH/9/f3/////////////////6ioqP8ICAj/AwMD/0tLS/+vr6//5OTk//j4+P////////////////+dnZ3/AQEB/0VFRf/39/f//////76+vv+BgYH/g4OD/4SEhP/S0tL//////+Xl5f8lJSX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9CQkL/5ubm//////////////////v7+//j4+P/m5ub/yQkJP8AAAD/Tk5O/+3t7f/////////////////7+/v/4eHh/5aWlv8fHx//AAAA/0VFRf/39/f//////////////////////////////////////+Xl5f8lJSX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP+Tk5P///////7+/v/FxcX/f39//1dXV/8mJib/BAQE/wAAAP8CAgL/oqKi///////9/f3/wcHB/35+fv9VVVX/JCQk/wMDA/8AAAD/AAAA/0VFRf/39/f//////7q6uv95eXn/enp6/3t7e//Pz8///////+Xl5f8lJSX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAf+dnZ3///////T09P9JSUn/AAAA/wAAAP8HBwf/RERE/1VVVf8EBAT/rKys///////v7+//QEBA/wAAAP8AAAD/CQkJ/0tLS/9RUVH/AAAA/0VFRf/39/f//////3p6ev8AAAD/AAAA/wICAv+jo6P//////+Xl5f8lJSX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9VVVX/8/Pz///////Pz8//jo6O/4mJif+3t7f/8/Pz/5mZmf8AAAD/YmJi//f39//+/v7/y8vL/46Ojv+NjY3/vLy8//b29v+NjY3/AAAA/0VFRf/39/f//////3p6ev8AAAD/AAAA/wICAv+kpKT//////+Xl5f8lJSX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8GBgb/aGho/9bW1v/7+/v////////////8/Pz/6+vr/3d3d/8AAAD/CQkJ/3Jycv/b29v//Pz8/////////////Pz8/+rq6v9tbW3/AAAA/0NDQ//v7+//+vr6/3d3d/8AAAD/AAAA/wICAv+fn5///f39/97e3v8kJCT/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AQEB/x0dHf9NTU3/Z2dn/2ZmZv9NTU3/Kysr/woKCv8AAAD/AAAA/wICAv8hISH/UVFR/2pqav9mZmb/TU1N/yoqKv8JCQn/AAAA/xMTE/9DQ0P/RkZG/yEhIf8AAAD/AAAA/wAAAP8sLCz/R0dH/z4+Pv8KCgr/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wMDA/8VFRX/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/EBAQ/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/xsbG/+9vb3/2dnZ/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//X19f/19fX/9fX1//b29v/lZWV/wQEBP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/x4eHv/T09P/8/Pz//Hx8f/x8fH/8fHx//Hx8f/x8fH/8fHx//Hx8f/x8fH/8fHx//Hx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AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wgICP83Nzf/iYmJ/9bW1v/7+/v///////7+/v/h4eH/mZmZ/0RERP8NDQ3/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8GBgb/VFRU/7CwsP/t7e3////////////39/f/yMjI/3V1df8oKCj/AwMD/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8cHBz/2tra////////////6urq/6mpqf9SUlL/ExMT/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD0AAAA/wAAAP8AAAD/AAAA/wAAAP8eHh7/2dnZ/9bW1v+FhYX/MzMz/wcHB/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPUAAADXAAAA/wAAAP8AAAD/AAAA/wAAAP8QEBD/TU1N/xwcHP8BAQH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANgAAACYAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAJgAAAA9AAAA5gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA5gAAAD0AAAADAAAAgwAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAAggAAAAMAAAAAAAAAEQAAAKIAAAD9AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP0AAACiAAAAEQAAAAAAAAAAAAAAAAAAABIAAACDAAAA6AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6AAAAIIAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAPAAAAJgAAADYAAAA9AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9AAAANgAAACYAAAAPAAAAAQAAAAAAAAAAAAAAADgAAAAAAcAAMAAAAAAAwAAgAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAEAAMAAAAAAAwAA4AAAAAAHAAA=
            """)
"""
icongerate=open("./data/ico2.ico", "w")
iconDecode=(base64.b64decode(iconBase64))
print(iconDecode)
icongerate.write(base64.b64decode(iconBase64))
icongerate.close()
"""

gui.iconbitmap("./data/ico")
gui.resizable(0,0)
textoconsole1="######################### Inicializando SSH TESTE v0.1 "
multy=textoconsole1.ljust(500,"#")
print(multy)

__title__=("SSH Teste |v0.1|")
__version__ = "0.1.2"
__date__    = "19-09-2016"
__author__  = "marcos.silvadeveloper@gmail.com"
__license__ = "License GPL v3.0"

canvasGui=tkinter.Canvas(gui, bg="black", height=1980, width=1980)
imagemBase64=("""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
""")
imagemfundo=tkinter.PhotoImage(data=base64.b64decode(imagemBase64))
cord=350,260
fundo=canvasGui.create_image(cord, anchor=CENTER, image=imagemfundo)
canvasGui.pack(expand="yes")
barra= Label(gui, text="SSH Teste |v0.1|", anchor=SW)
barra.pack()


def consultaBD():
    print("\nCONSULTA BANCO DE DADOS")
    print("----------------------------------------------------------")
    #Definindo o nome do objeto consultaBD que chama nova janela Toplevel
    consultaBD=Toplevel(gui)
    #Definindo o tamanho da TopLevel("consultaBD")
    consultaBD.geometry("700x550")
    #Dando titulo a janela "consultaBD"
    consultaBD.title("Consulta ao Banco de Dados |SSH Teste v0.1|")
    #Titulo "Consulta both"
    titulo=("Consulta ao Banco de Dados")
    #Icone do programa
    consultaBD.iconbitmap("./data/ico")
    tituloConsBD = LabelFrame(consultaBD, text=titulo)
    tituloConsBD.pack(fill="both", expand="yes")

    def verificarNET():
        try:

            print("\nVERIFICANDO CONEXÃO COM A INTERNET.......")
            print("----------------------------------------------------------")
            rg=requests.get("http://aragones.esy.es")
            status=rg.status_code
            def falha():
                print("\nCONEXÃO NÃO ESTABELECIDA COM SUCESSO CODE: %d......."% (status))
                print("----------------------------------------------------------")
                #Define o nome do objeto abresobre chama nova janela TopLevel

                mensagem=(consultaBD,"Conexão não estabelecida com sucesso CODE: %d."% (status))
                messagebox.showinfo("Alerta: Falha", (mensagem))

                """
                
                falha=Toplevel(gui)
                #falha.transient(parent=None)
                falha.geometry("250x200")
                falha.title("Alerta: Falha")
                falha.attributes("-toolwindow", 1)
                falha.resizable(0,0)
                #ICONE
                falhaVar2=StringVar()
                falha_label1=Label(falha, font=45, textvariable=falhaVar, relief=FLAT, justify=CENTER, anchor=CENTER, wraplenght=0)
                falha_label2=Label(falha, textvariable=falhaVar2, justify=CENTER, anchor=CENTER, wraplength=0)
                falhaVar.set("ALERTA:")
                falhaVar2.set("Conexão não estabelecida, verifique o log ou console. Status: %d" % (status))
                falha_label1.pack()
                falha_label2.pack()
                falha.mainloop()
                #Fim
                """
            
            def sucesso():
                print("\nCONEXÃO ESTABELECIDA COM SUCESSO.......")
                print("----------------------------------------------------------")
                #Define o nome do objeto abresobre chama nova janela TopLevel

                mensagem2=("Conexão estabelecida com sucesso CODE: %d."% (status))
                messagebox.showinfo("Alerta: Sucesso", (mensagem2))
                
                """
                sucesso=Toplevel(gui)
                sucesso.geometry("250x100")
                sucesso.title("Sobre")
                sucesso.attributes("-toolwindow", 1)
                sucesso.resizable(0,0)
                #ICONE
                sucesso.iconbitmap("./data/ico")
                sucessoVar=StringVar()
                sucessoVar2=StringVar()
                su_label=Label(sucesso, font=45, textvariable=sucessoVar, relief=FLAT, justify=CENTER, anchor=CENTER,wraplength=0)
                su_label2=Label(sucesso, textvariable=sucessoVar2, justify=CENTER, anchor=CENTER, wraplength=0)
                sucessoVar.set("ALERTA:")
                sucessoVar2.set("Conexão estabelecida com sucesso. Status: %d\n" % (status))
                su_label.pack()
                su_label2.pack()
                #command ddestroy para fechar a capeta
                botaosu_OK=tkinter.Button(sucesso, text = "OK", command = sucesso.destroy)
                botaosu_OK.pack()
                sucesso.mainloop()
                """
                
            if status==200:
                sucesso()
            else:
                falha()
            if status != 200:
                falha()
        except:
            print("Falha de conexão")
            print("\nCONEXÃO NÃO ESTABELECIDA COM SUCESSO.......")
            print("----------------------------------------------------------")
            mensagem3=("Conexão não estabelecida com sucesso: ALGO DE ERRADO NÃO ESTA CERTO.")
            messagebox.showinfo("Alerta: Falha", (mensagem3))
            
    
        
    #CHAMA LISTA
    Lb1=Listbox(tituloConsBD)
    Lb2=Listbox(tituloConsBD)
    Lb3=Listbox(tituloConsBD)
    Lb4=Listbox(tituloConsBD)

    #Scroll Bar da ListBox
    sb1=Scrollbar(tituloConsBD)
    sb2=Scrollbar(Lb1)
    sb3=Scrollbar(Lb2)
    sb4=Scrollbar(Lb3)
    sb5=Scrollbar(Lb4)
    #listb=Listbox(consultaBD)
    #listb.pack(side='left')
    sb1.pack(side='right', fill=Y)
    sb1.set
    sb2.pack(side='right', fill=Y)
    sb2.set
    sb3.pack(side='right', fill=Y)
    sb3.set
    sb4.pack(side='right', fill=Y)
    sb4.set
    sb5.pack(side='right', fill=Y)
    sb5.set
    #CONFIGURANDO BARRA DE ROLAGEM
    #listb.config(yscrollcomand=sb1.set)
    Lb1.config(yscrollcommand=sb1.set)
    Lb2.config(yscrollcommand=sb1.set)
    Lb3.config(yscrollcommand=sb1.set)
    Lb4.config(yscrollcommand=sb1.set)
    Lb1.config(yscrollcommand=sb2.set)
    Lb2.config(yscrollcommand=sb3.set)
    Lb3.config(yscrollcommand=sb4.set)
    Lb4.config(yscrollcommand=sb5.set)

    #REALIZANDO A ROLAGEM VERTICAL REFERENTE A VARIAVEL     listb
    sb1.config(command=(Lb1.yview,Lb2.yview,Lb3.yview,Lb4.yview))
    sb1.config(command=Lb2.yview)
    sb1.config(command=Lb3.yview)
    sb1.config(command=Lb4.yview)
    sb2.config(command=Lb1.yview)
    sb3.config(command=Lb2.yview)
    sb4.config(command=Lb3.yview)
    sb5.config(command=Lb4.yview)

    #siteDB=requests.get("http://www.aragones.esy.es/ContasSSHFree/consulta.php")
    #dados=(siteDB.content)
    #dados_convert=(dados.decode('utf-8'))


    def cons1():
        try:
            print("\nCONSULTANDO SERVIDOR WEB.......")
            print("----------------------------------------------------------")

            barradeprogresso.step(99.999999999999999)
                        
            consultaHostname=requests.get("http://www.aragones.esy.es/ContasSSHFree/consulta_Hostname.php")
            consultaUsuario=requests.get("http://www.aragones.esy.es/ContasSSHFree/consulta_Usuario.php")
            consultaSenha=requests.get("http://www.aragones.esy.es/ContasSSHFree/consulta_Senha.php")
            consultaValidade=requests.get("http://www.aragones.esy.es/ContasSSHFree/consulta_Validade.php")

            
            
            dadosHostname=(consultaHostname.content)
            dadosUsuario=(consultaUsuario.content)
            dadosSenha=(consultaSenha.content)
            dadosValidade=(consultaValidade.content)

            #barradeprogresso.step([40])
            
            dados_converteHostname=(dadosHostname.decode('utf-8'))
            dados_converteUsuario=(dadosUsuario.decode('utf-8'))
            dados_converteSenha=(dadosSenha.decode('utf-8'))
            dados_converteValidade=(dadosValidade.decode('utf-8'))

            
            
            htmlcodeHostname=(dados_converteHostname)
            htmlcodeUsuario=(dados_converteUsuario)
            htmlcodeSenha=(dados_converteSenha)
            htmlcodeValidade=(dados_converteValidade)

            

            class HTMLRender(Text, HTMLParser):
                # Aqui definimos as tags alinhadas:
                __inline = [ "b", "i", "strong" ]
                # Aqui definimos as tags que geram seus próprios blocos
                __block = [ "h1", "h2", "h3", "p", "dl", "dt", "dd" ]

                # Aqui algumas tags comuns em HTML que não vamos renderizar
                __ignore = [ "body", "html", "div" ]

                # Aqui definimos tags que são normalmente deixadas abertas
                __open = [ "dt", "dd", "p", "td" ]
                # Formatos/fontes aplicadas a cada tag:
                __formats = {
                    'h1': { 'font': ("Helvetica", "16", "bold"), 'justify': CENTER },
                    'h2': { 'font': ("Helvetica", "12", "bold"), 'justify': CENTER },
                    'h3': { 'font': ("Helvetica", "10", "bold italic")} ,
                    'dt': { 'font': ("Helvetica", "10", "bold") } ,
                    'b': { 'font': ("Helvetica", "10", "bold") },
                    'i': { 'font': ("Helvetica", "10", "italic") },
                    'strong': { 'font': ("Helvetica", "10", "bold italic") },
                    'default': { 'font': ("Helvetica", "10"), 'foreground': 'red'  },
                    }
                def __init__(self, *cnf, **kw):
                    Text.__init__(self, *cnf, **kw)
                    HTMLParser.__init__(self)
                    self.__last = None
                    self.__tags = { }
                    self.__index = 0
                        
                def insert(self, text):
                    self.feed(text)
                def handle_starttag(self, tag, attr):
                    # Se a tag deve ser ignorada, nada deve ser feito.
                    if tag in self.__ignore:
                        pass
                    # Se a tag cria um bloco, inserimos quebras de parágrafo
                    # no texto para simular o efeito.
                    elif tag in self.__block:
                        if self.__last in self.__open:
                            self.handle_endtag(self.__last)
                            self.__last = tag
                            Text.insert(self, INSERT, "\n\n")
                            # Inserimos a posição da tag no texto no dicionário para
                            # marcarmos a posição em que a formatação deve ser aplicada.
                    if tag in self.__tags:
                        self.__tags[tag].append(self.index(INSERT))
                    else:
                        self.__tags[tag] = [ self.index(INSERT) ]

                def handle_data(self, data):
                    data = ' '.join(data.split()) + ' '
                    Text.insert(self, INSERT, data)

                def handle_endtag(self, tag):
                    try:
                        start = self.__tags[tag].pop()
                        end = self.index(INSERT)
                        tag_name = "Tag%05d" % self.__index
                        self.__index = self.__index + 1
                        self.tag_add(tag_name, start, end)
                        self.tag_config(tag_name, **self.__formats[tag])
                        return
                    except KeyError:
                        pass


            #barradeprogresso.step([99])

            texto1 = HTMLRender(tituloConsBD, font=("Helvetica", "10", ""), wrap=WORD)
            print("\nAbrindo a pagina web......................")
            url=("http://www.aragones.esy.es/ContasSSHFree/consulta.php")
            print("\nExtraindo conteudo e tag..................")
            consultaSite=requests.get(url)
            dadosSite=(consultaSite.content)
            dadosSiteStr=(dadosSite.decode('utf-8'))
            print("\nArmazenando dados do site temporariamente para a leitura..........")
            arquivolog=open('./data/templog2', 'w')
            dadoslog=(dadosSiteStr)
            arquivolog.write(dadoslog)
            arquivolog.close()
            texto1.insert(open('./data/templog2').read())


            
            
            print("\nConexão estabelecida com sucesso...................................")
            print("\nListando todos os dados encontrado")

            print("Removendo tag's")
            print("--------------------------------------------------")








            print(htmlcodeHostname)
            print("--------------------------------------------------")
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            print(htmlcodeValidade)
            print("--------------------------------------------------")
            
            print(type(htmlcodeHostname))
            print("--------------------------------------------------")
            print(type(htmlcodeUsuario))
            print("--------------------------------------------------")
            print(type(htmlcodeSenha))
            print("--------------------------------------------------")
            print(type(htmlcodeValidade))
            print("--------------------------------------------------")

            htmlcodeHostname=(htmlcodeHostname.replace("<html>", " "))
            print(htmlcodeHostname)

            print("--------------------------------------------------")
        

            htmlcodeUsuario=(htmlcodeUsuario.replace("<html>", " "))
            print(htmlcodeUsuario)

            print("--------------------------------------------------")

            htmlcodeSenha=(htmlcodeSenha.replace("<html>", " "))
            print(htmlcodeSenha)

            print("--------------------------------------------------")

            htmlcodeValidade=(htmlcodeValidade.replace("<html>", " "))
            print(htmlcodeValidade)

            print("--------------------------------------------------")

            



            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("<head>", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("<head>", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("<head>", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("<head>", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")



            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace('<meta HTTP-EQUIV="refresh" CONTENT="60">', " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace('<meta HTTP-EQUIV="refresh" CONTENT="60">', " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace ('<meta HTTP-EQUIV="refresh" CONTENT="60">', " "))
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace('<meta HTTP-EQUIV="refresh" CONTENT="60">', " "))
            print("--------------------------------------------------")


            
            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("</head>", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("</head>", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("</head>", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("</head>", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")






            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("<body>", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("<body>", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("<body>", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("<body>", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")





            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("<table border='1'>", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("<table border='1'>", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("<table border='1'>", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcode=(htmlcodeValidade.replace("<table border='1'>", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")
            







            
            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("<tr>", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("<tr>", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("<tr>", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("<tr>", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")
            




            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("<td>", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("<td>", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("<td>", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("<td>", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")



            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("</td>", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("</td>", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("</td>", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("</td>", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")



            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("</tr>", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("</tr>", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("</tr>", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("</tr>", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")




            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("</table>", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("</table>", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("</table>", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("</table>", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")




            

            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("HOSTNAMES", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            
            


            

            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("USUARIO", " "))
            print(htmlcodeUsuario)

            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("SENHA", " "))
            print(htmlcodeSenha)

            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("VALIDADE", " "))
            print(htmlcodeValidade)

            print("REMOVENDO ESPAÇOS EM BRANCO")
            #REMOVENDO ESPAÇOS EM BRANCO DA STRIG

            print("Adaptação a pagina")

            htmlcodeValidade=(htmlcodeValidade.replace("<table border='1'>", " "))
            print(htmlcodeValidade)

            htmlcodeUsuario=(htmlcodeUsuario.strip())
            print(htmlcodeValidade)

            print("--------------------------------------------------")
            
            htmlcodeHostname=htmlcodeHostname.strip()
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcodeUsuario=htmlcodeUsuario.strip()
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=htmlcodeSenha.strip()
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=htmlcodeValidade.strip()
            print(htmlcodeValidade)
            print("--------------------------------------------------")






            print("--------------------------------------------------")

            htmlcodeHostname=(htmlcodeHostname.replace("   ", " "))
            print(htmlcodeHostname)
            print("--------------------------------------------------")
            htmlcode=(htmlcodeUsuario.replace("    ", " "))
            print(htmlcode)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("   ", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("   ", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")






            
            
            print("--------------------------------------------------")
            htmlcodeHostname=(htmlcodeHostname.replace("  ", " "))
            print(htmlcode)
            print("--------------------------------------------------")
            htmlcodeUsuario=(htmlcodeUsuario.replace("  ", " "))
            print(htmlcodeUsuario)
            print("--------------------------------------------------")
            htmlcodeSenha=(htmlcodeSenha.replace("  ", " "))
            print(htmlcodeSenha)
            print("--------------------------------------------------")
            htmlcodeValidade=(htmlcodeValidade.replace("  ", " "))
            print(htmlcodeValidade)
            print("--------------------------------------------------")
            print("Adaptação da pagina")
            htmlcodeUsuario=(htmlcodeUsuario.replace("  ", " "))
            print(htmlcodeUsuario)





            

            htmlcodeHostnameList=(htmlcodeHostname.split(" "))
            print(htmlcodeHostnameList)
            print("--------------------------------------------------")
            htmlcodeUsuarioList=(htmlcodeUsuario.split(" "))
            print(htmlcodeUsuarioList)
            print("--------------------------------------------------")
            htmlcodeSenhaList=(htmlcodeSenha.split(" "))
            print(htmlcodeSenhaList)
            print("--------------------------------------------------")
            htmlcodeValidadeList=(htmlcodeValidade.split(" "))
            print(htmlcodeValidadeList)

            
            
                    



            

            """class lol(HTMLParser):
                def handle_data(self,data):
                    print(data)

            parser = lol()
            parser.feed(htmlcode)"""

            for i in list(htmlcodeHostnameList):
                Lb1.insert(END, i)
            for i in list(htmlcodeUsuarioList):
                Lb2.insert(END, i)
            for i in list(htmlcodeSenhaList):
                Lb3.insert(END, i)
            for i in list(htmlcodeValidadeList):
                Lb4.insert(END, i)

            
                    
    
                
                
        except requests.exceptions.ConnectionError:
            print("Erro na conexão, consulte o console. Ou verifique sua conexão com a internet")
            print("----------------------------------------------------------")
            mensagem4=("Erro na conexão, consulte o console ou verifique sua conexão com a internet.")
            messagebox.showinfo("Alerta: Falha", (mensagem4))
            
            #dadosinstanciados=(u.coletor.dadosVar)
            #for i in ():
                #Lb1.insert(END, i)
               # Lb2.insert(END, i)
               # Lb3.insert(END, i)
              #  Lb4.insert(END, i)
            
    def salvardadosLocal():
        print("\nACESSANDO NOVAMENTE O SERVIDOR WEB.......")
        print("----------------------------------------------------------")
        print("PROCESSANDO DADOS.............................................................................")

            
        barradeprogresso.start(1000)

            
        consultaHostname=requests.get("http://www.aragones.esy.es/ContasSSHFree/consulta_Hostname.php")
        consultaUsuario=requests.get("http://www.aragones.esy.es/ContasSSHFree/consulta_Usuario.php")
        consultaSenha=requests.get("http://www.aragones.esy.es/ContasSSHFree/consulta_Senha.php")
        consultaValidade=requests.get("http://www.aragones.esy.es/ContasSSHFree/consulta_Validade.php")
            
            
        dadosHostname=(consultaHostname.content)
        dadosUsuario=(consultaUsuario.content)
        dadosSenha=(consultaSenha.content)
        dadosValidade=(consultaValidade.content)
            
            
        dados_converteHostname=(dadosHostname.decode('utf-8'))
        dados_converteUsuario=(dadosUsuario.decode('utf-8'))
        dados_converteSenha=(dadosSenha.decode('utf-8'))
        dados_converteValidade=(dadosValidade.decode('utf-8'))
            
        htmlcodeHostname=(dados_converteHostname)
        htmlcodeUsuario=(dados_converteUsuario)
        htmlcodeSenha=(dados_converteSenha)
        htmlcodeValidade=(dados_converteValidade)

        print("\nConexão estabelecida com sucesso...................................")
        print("\nListando todos os dados encontrado")

        print("Removendo tag's")
        print("--------------------------------------------------")








        print(htmlcodeHostname)
        print("--------------------------------------------------")
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        print(htmlcodeValidade)
        print("--------------------------------------------------")
            
        print(type(htmlcodeHostname))
        print("--------------------------------------------------")
        print(type(htmlcodeUsuario))
        print("--------------------------------------------------")
        print(type(htmlcodeSenha))
        print("--------------------------------------------------")
        print(type(htmlcodeValidade))
        print("--------------------------------------------------")

        htmlcodeHostname=(htmlcodeHostname.replace("<html>", " "))
        print(htmlcodeHostname)

        print("--------------------------------------------------")
        

        htmlcodeUsuario=(htmlcodeUsuario.replace("<html>", " "))
        print(htmlcodeUsuario)

        print("--------------------------------------------------")

        htmlcodeSenha=(htmlcodeSenha.replace("<html>", " "))
        print(htmlcodeSenha)

        print("--------------------------------------------------")

        htmlcodeValidade=(htmlcodeValidade.replace("<html>", " "))
        print(htmlcodeValidade)

        print("--------------------------------------------------")

            



            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("<head>", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("<head>", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("<head>", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("<head>", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")



            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace('<meta HTTP-EQUIV="refresh" CONTENT="60">', " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace('<meta HTTP-EQUIV="refresh" CONTENT="60">', " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace ('<meta HTTP-EQUIV="refresh" CONTENT="60">', " "))
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace('<meta HTTP-EQUIV="refresh" CONTENT="60">', " "))
        print("--------------------------------------------------")


            
            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("</head>", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("</head>", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("</head>", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("</head>", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")






            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("<body>", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("<body>", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("<body>", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("<body>", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")





            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("<table border='1'>", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("<table border='1'>", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("<table border='1'>", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcode=(htmlcodeValidade.replace("<table border='1'>", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")
            







            
        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("<tr>", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("<tr>", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("<tr>", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("<tr>", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")
            




            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("<td>", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("<td>", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("<td>", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("<td>", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")



            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("</td>", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("</td>", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("</td>", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("</td>", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")


            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("</tr>", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("</tr>", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("</tr>", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("</tr>", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")




            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("</table>", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("</table>", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("</table>", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("</table>", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")




            

        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("HOSTNAMES", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
            
            


            

        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("USUARIO", " "))
        print(htmlcodeUsuario)

        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("SENHA", " "))
        print(htmlcodeSenha)

        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("VALIDADE", " "))
        print(htmlcodeValidade)

        print("REMOVENDO ESPAÇOS EM BRANCO")
        #REMOVENDO ESPAÇOS EM BRANCO DA STRIG

        print("Adaptação a pagina")

        htmlcodeValidade=(htmlcodeValidade.replace("<table border='1'>", " "))
        print(htmlcodeValidade)

        htmlcodeUsuario=(htmlcodeUsuario.strip())
        print(htmlcodeValidade)

        print("--------------------------------------------------")
            
        htmlcodeHostname=htmlcodeHostname.strip()
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcodeUsuario=htmlcodeUsuario.strip()
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=htmlcodeSenha.strip()
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=htmlcodeValidade.strip()
        print(htmlcodeValidade)
        print("--------------------------------------------------")






        print("--------------------------------------------------")

        htmlcodeHostname=(htmlcodeHostname.replace("   ", " "))
        print(htmlcodeHostname)
        print("--------------------------------------------------")
        htmlcode=(htmlcodeUsuario.replace("    ", " "))
        print(htmlcode)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("   ", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("   ", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")






            
            
        print("--------------------------------------------------")
        htmlcodeHostname=(htmlcodeHostname.replace("  ", " "))
        print(htmlcode)
        print("--------------------------------------------------")
        htmlcodeUsuario=(htmlcodeUsuario.replace("  ", " "))
        print(htmlcodeUsuario)
        print("--------------------------------------------------")
        htmlcodeSenha=(htmlcodeSenha.replace("  ", " "))
        print(htmlcodeSenha)
        print("--------------------------------------------------")
        htmlcodeValidade=(htmlcodeValidade.replace("  ", " "))
        print(htmlcodeValidade)
        print("--------------------------------------------------")
        print("Adaptação da pagina")
        htmlcodeUsuario=(htmlcodeUsuario.replace("  ", " "))
        print(htmlcodeUsuario)





            

        htmlcodeHostnameList=(htmlcodeHostname.split(" "))
        print(htmlcodeHostnameList)
        print("--------------------------------------------------")
        htmlcodeUsuarioList=(htmlcodeUsuario.split(" "))
        print(htmlcodeUsuarioList)
        print("--------------------------------------------------")
        htmlcodeSenhaList=(htmlcodeSenha.split(" "))
        print(htmlcodeSenhaList)
        print("--------------------------------------------------")
        htmlcodeValidadeList=(htmlcodeValidade.split(" "))
        print(htmlcodeValidadeList)

        print("\n\n\n GERANDO PAGINA HTML PARA CONSULTA..............................................................................................")
        print("---------------------------------------------------")

        pagina=open("./data/Dados.html", "w", encoding="iso-8859-1")
        pagina.write("""
<HTML>
<HEAD>

    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <title>|SSH teste|</title>
    <META name="description" content="|SSH Teste Software Open Source|">
    <META name="keywords" content="SSH Teste Software programa de codigo aberto">
    <META name="revisit-after" content="1days">
    <META name="robots" content="index, follow">

<style type="text/css">
	body,td			{ font-family: arial, helvetica; color: #434343; font-size: 12px; }
	

	A:link			{ text-decoration: none; color: #2244ee; }
	A:visited		{ text-decoration: none; color: #2244ee; }
	A:hover			{ text-decoration: underline; }

	.hidden			{ font-size: 8px; font-weight: bold; color: #ffffff; }
	A:link.hidden		{ text-decoration: none; color: #ffffff; }
	A:visited.hidden	{ text-decoration: none; color: #ffffff; }
	A:hover.hidden		{ text-decoration: none; color: #ffffff; }

	.small			{ font-size: 10px; }

	.emph			{ font-weight: bold; }
	table                   { float:left;}
</style>


</HEAD>

<BODY BGCOLOR="FFFFFF" TEXT="000000" LINK="0000FF" VLINK="0000FF" Marginwidth=0 marginheight=0 leftmargin=0 topmargin=0>


<TABLE BORDER=0 WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>
<TR><TD BGCOLOR=000000 width=100% height=3 colspan=2><IMG SRC="dot.gif" border=0 width=1 height=3></TD></TR>

<TR>
<TD width=150 BGCOLOR=8A8A8A><IMG SRC="logo.png" border=0 width=64 height=64></TD>
<TD VALIGN=top BGCOLOR=8A8A8A>
<CENTER></cENTER>

</TD>
</TR>

<TR><TD BGCOLOR=000000 width=100% colspan=2>
<FONT SIZE=2 COLOR=WHITE><CENTER>
<A HREF="http://aragones.esy.es/SSHTeste/index.html"><FONT SIZE=2 COLOR=WHITE><B>Inicio</B></FONT></A> | 
<A HREF="http://aragones.esy.es/SSHTeste/news.html"><FONT SIZE=2 COLOR=WHITE><B>Noticias</B></FONT></A> |
<A HREF="http://aragones.esy.es/SSHTeste/modulos.html"><FONT SIZE=2 COLOR=WHITE><B>Modulos</B></FONT></A> |
<A HREF="http://aragones.esy.es/SSHTeste/doc.html"><FONT SIZE=2 COLOR=WHITE><B>Documentação</B></FONT></A> |
<A HREF="https://sourceforge.net/projects/ssh-teste/"><FONT SIZE=2 COLOR=WHITE><B>Download</B></FONT></A> |
<A HREF="http://aragones.esy.es/SSHTeste/sobre.htm"><FONT SIZE=2 COLOR=WHITE><B>Sobre</B></FONT></A> |
</CENTER></FONT>
</TD></TR>

</TABLE>
<BR>



<TABLE BORDER=0 WIDTH=98% ALIGN=CENTER>
<TR>

<TD VALIGN=top Width=75%>

<FONT><B>Dados Locais salvos</B></FONT><BR><BR>

<FONT SIZE=2>

    """)
        pagina.write("""<table class="primeiratabela" border='1'><td>HOSTNAMES			</td>""")
        for c in list(htmlcodeHostnameList):
            pagina.write("<tr><td>%s</td></tr>" % c)
        pagina.write("</table>")
        pagina.write('<table class="segundatabela" border="1"><td>USUARIO			</td>')
        for d in list(htmlcodeUsuarioList):
            pagina.write("<tr><td>%s</td></tr>" % d)
        pagina.write("</table>")
        pagina.write("""<table class="terceiratabela" border="1"><td>SENHA                       </td>""")
        
        for e in list(htmlcodeSenhaList):
            pagina.write("<tr><td>%s</td></tr>" % e)
        pagina.write("</table>")
        pagina.write("""<table class="quartatabela" border="1"><td>VALIDADE                      </td>""")
        for f in list(htmlcodeValidadeList):
            pagina.write("<tr><td>%s</td></tr>" % f)
        pagina.write("</table>")
        pagina.write("""<FONT SIZE=1><A HREF=""><B></B></A></FONT>

<BR><BR>

</table>


<BR><BR>

</FONT>

</TD>

<TD VALIGN=top width=20%>
<!--
<CENTER><FONT><B>Sponsors</B></FONT></CENTER><BR>

<FONT SIZE=2>
<--
<A HREF="">Text Ad 1</a> - Small text ad, or promotional text here.<BR>
<FONT SIZE=1><A HREF=""><B>Read more here....</B></A></FONT>
<BR><BR>

<A HREF="">Text Ad 2</a> - Small text ad, or promotional text here.<BR>
<FONT SIZE=1><A HREF=""><B>Read more here....</B></A></FONT>
<BR><BR>

<A HREF="">Text Ad 3</a> - Small text ad, or promotional text here.<BR>
<FONT SIZE=1><A HREF=""><B>Read more here....</B></A></FONT>
<BR><BR>

</FONT>
-->

</TD>

<TR></TABLE>







<BR>
<TABLE BORDER=0 WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>

<TR><TD BGCOLOR=000000 width=100% colspan=2>
<FONT SIZE=2 COLOR=WHITE><CENTER>
<!--
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link1</B></FONT></A> | 
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link2</B></FONT></A> |
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link3</B></FONT></A> |
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link4</B></FONT></A> |
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link5</B></FONT></A> |
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link6</B></FONT></A> |
</CENTER></FONT>
</TD></TR>
-->
<TR>
<TD width=150 BGCOLOR=8A8A8A><IMG SRC="logo.png" border=0 width=32 height=32></TD>
<TD VALIGN=top BGCOLOR=8A8A8A>
<CENTER></cENTER>

</TD>
</TR>

<TR><TD BGCOLOR=000000 width=100% height=3 colspan=2><IMG SRC="dot.gif" border=0 width=1 height=3></TD></TR>

</TABLE>

<CENTER>
<FONT SIZE=2>
© 2016 <i>SSH Teste</i> <A HREF="http://aragones.esy.es/">AragonesNets</a>.
</FONT>
</CENTER>
</HTML>


""")
        pagina.close()
        print("PAGINA GERADA SALVA EM .../data/Dados.html")
        mensagem5=("Pagina gerada salva em /data/Dados.html.")
        messagebox.showinfo("Alerta: Sucesso", (mensagem5))
        
        
    def consultardadosLocal():
        print("\nABRINDO DOCUMENTO LOCAL.......")
        print("----------------------------------------------------------")
        url="./data/Dados.html"
        webbrowser.open(url)
        
    def abrirpaginaweb():
        try:
            print("\nABRINDO PAGINA DA WEB.......")
            print("----------------------------------------------------------")
            #Define o nome do objeto abresobre chama nova janela TopLevel
            abrirpagina=Toplevel(gui)
            abrirpagina.geometry("700x500")
            abrirpagina.title("Pagina Web | SSH Teste v0.1|")
            #ICONE
            abrirpagina.iconbitmap("./data/ico")
            class HTMLRender(Text, HTMLParser):
                # Aqui definimos as tags alinhadas:
                __inline = [ "b", "i", "strong" ]
                # Aqui definimos as tags que geram seus próprios blocos
                __block = [ "h1", "h2", "h3", "p", "dl", "dt", "dd" ]

                # Aqui algumas tags comuns em HTML que não vamos renderizar
                __ignore = [ "body", "html", "div" ]

                # Aqui definimos tags que são normalmente deixadas abertas
                __open = [ "dt", "dd", "p", "td" ]
                # Formatos/fontes aplicadas a cada tag:
                __formats = {
                    'h1': { 'font': ("Helvetica", "16", "bold"), 'justify': CENTER },
                    'h2': { 'font': ("Helvetica", "12", "bold"), 'justify': CENTER },
                    'h3': { 'font': ("Helvetica", "10", "bold italic")} ,
                    'dt': { 'font': ("Helvetica", "10", "bold") } ,
                    'b': { 'font': ("Helvetica", "10", "bold") },
                    'i': { 'font': ("Helvetica", "10", "italic") },
                    'strong': { 'font': ("Helvetica", "10", "bold italic") },
                    'default': { 'font': ("Helvetica", "10"), 'foreground': 'red'  },
                    }
                def __init__(self, *cnf, **kw):
                    Text.__init__(self, *cnf, **kw)
                    HTMLParser.__init__(self)
                    self.__last = None
                    self.__tags = { }
                    self.__index = 0
                        
                def insert(self, text):
                    self.feed(text)
                def handle_starttag(self, tag, attr):
                    # Se a tag deve ser ignorada, nada deve ser feito.
                    if tag in self.__ignore:
                        pass
                    # Se a tag cria um bloco, inserimos quebras de parágrafo
                    # no texto para simular o efeito.
                    elif tag in self.__block:
                        if self.__last in self.__open:
                            self.handle_endtag(self.__last)
                            self.__last = tag
                            Text.insert(self, INSERT, "\n\n")
                            # Inserimos a posição da tag no texto no dicionário para
                            # marcarmos a posição em que a formatação deve ser aplicada.
                    if tag in self.__tags:
                        self.__tags[tag].append(self.index(INSERT))
                    else:
                        self.__tags[tag] = [ self.index(INSERT) ]

                def handle_data(self, data):
                    data = ' '.join(data.split()) + ' '
                    Text.insert(self, INSERT, data)
    
                def handle_endtag(self, tag):
                    try:
                        start = self.__tags[tag].pop()
                        end = self.index(INSERT)
                        tag_name = "Tag%05d" % self.__index
                        self.__index = self.__index + 1
                        self.tag_add(tag_name, start, end)
                        self.tag_config(tag_name, **self.__formats[tag])
                        return
                    except KeyError:
                        pass


            text = HTMLRender(abrirpagina, font=("Helvetica", "10", ""), wrap=WORD)
            print("Abrindo a pagina web......................")
            url=("http://www.aragones.esy.es/ContasSSHFree/consulta.php")
            print("Extraindo conteudo e tag..................")
            consultaSite=requests.get(url)
            dadosSite=(consultaSite.content)
            dadosSiteStr=(dadosSite.decode('utf-8'))
            print("Armazenando dados do site temporariamente para a leitura..........")
            arquivolog=open('./data/templog', 'w')
            dadoslog=(dadosSiteStr)
            arquivolog.write(dadoslog)
            arquivolog.close()
            text.insert(open('./data/templog').read())

            #Barra de rolagem 
            sb=Scrollbar(abrirpagina, orient=VERTICAL, command=text.yview)
            sb.set
            text.configure(state=DISABLED, yscrollcommand=sb.set)

            #Widget
            text.grid(row=1, column=1, sticky=N+W+E+S+SW+NW+SE+NE)
            sb.grid(row=1, column=2,sticky=N+S)

            #Loop finale
            abrirpagina.mainloop()
        except:
            mensagem12=("Verifique a sua conexão com a internet.")
            messagebox.showinfo("Alerta: Falha", (mensagem12))
            
    
    


    #NOMES
    hostnametexto="HOSTNAMES        "
    hostnames_title=Label(Lb1, text=hostnametexto)
    hostnames_title.pack(fill=Y, side='bottom')

    usuariotexto="USUARIO             "
    usuario_title=Label(Lb2, text=usuariotexto)
    usuario_title.pack(fill=Y, side='bottom')
    
    senhatexto="SENHA                 "
    senha_title=Label(Lb3, text=senhatexto)
    senha_title.pack(fill=Y, side='bottom')

    validadetexto="VALIDADE           "
    validade_title=Label(Lb4, text=validadetexto)
    validade_title.pack(fill=Y, side='bottom')
    
    #DADOS DA CONSULTA SENDO LISTADO
    #Lb1.insert(3, "Teste")
    #Lb1.insert(4, "Teste")
    #Lb1.insert(5, "Teste124")

    #Final Geral LISTA BOX 1
    Lb1.pack(side='left', fill=Y)

    #Lb2.insert(1, "Jaxhfjxfhjxfhjva")
    #Lb2.insert(2, "Collxfhjxfhjxfhjage")

    #Final Gerada LISTA BOX 2
    Lb2.pack(side='left', fill=Y)

    #Lb3.insert(1, "Pxfgjhxfghxfgython")
    #Lb3.insert(2, "Jalxfgjxfgjxfgja")

    #Final Geral LISTA BOX 3
    Lb3.pack(side='left', fill=Y)

    #Lb4.insert(1, "Marxfgjxfgjxfcos")
    #Lb4.insert(2, "PxfgjxfgjxgfjT")

    Lb4.pack(side='left', fill=Y)   

    
    botaoframe = Frame(consultaBD)
    botaoframe.pack(side = BOTTOM)

    #botaoframe1 = Frame(consultaBD)
    #botaoframe1.pack(side=BOTTOM)
    
    #botaoframe3=Frame(consultaBD)
    #botaoframe3.pack(side=BOTTOM)
    
    textoB1="Consultar Web"
    blackbutton=Button(botaoframe, text=textoB1, fg="black", command=cons1)
    blackbutton.pack(side=LEFT)
    textoB4="Salvar dados Local"
    redbutton2=Button(botaoframe, text=textoB4, fg="red", command=salvardadosLocal)
    redbutton2.pack(side=LEFT)
    textoB4="Consultar Local"
    blackbutton2=Button(botaoframe, text=textoB4, fg="black", command=consultardadosLocal)
    blackbutton2.pack(side=LEFT)
    textoB2="Verificar conexão"
    bluebutton = Button(botaoframe, text=textoB2, fg="blue", command=verificarNET)
    bluebutton.pack(side = LEFT)
    textoB3="Abrir pagina"
    redbutton = Button(botaoframe, text=textoB3, fg="red", command=abrirpaginaweb)
    redbutton.pack(side = LEFT)



    frame = ttk.Frame()

    frame.pack(expand=True, fill=Tkinter.BOTH, side=Tkinter.LEFT)

    barradeprogresso = ttk.Progressbar(consultaBD, orient='horizontal', mode='determinate')
            
    barradeprogresso.pack(expand=True, fill=Tkinter.BOTH, side=Tkinter.LEFT)

    
    """
    def tick():
        global time1
        time2=time.strftime('%H:%M:%S')
        if time2 != time1:
            time1 = time2
            clock.config(text=time2)
        clock.after(200, tick)

    time1=''
    status=Label(tituloConsBD, text="Horario", bd=1, relief=SUNKEN, anchor=W)
    status.grid()

    clock=Label(tituloConsBD, font=('times', 15, 'bold'))
    clock.grid()

    tick()
    """
    
    consultaBD.mainloop()
    

def sobreDados():
    print("\nSOBRE O DESENVOLVEDOR.......")
    print("----------------------------------------------------------")
    #Define o nome do objeto abresobre chama nova janela TopLevel
    abresobre=Toplevel(gui)
    abresobre.geometry("390x500")
    abresobre.title("Sobre")
    #ICONE
    abresobre.iconbitmap("./data/ico")
    #Cria objeto Canvas e chama na biblioteca do tkinter
    canvas = tkinter.Canvas(abresobre)
    #canvas.grid(row = 0, column = 0)
    #abre o arquivo onde contem a imagem
    filenameBase64=("""
""")
    filename = tkinter.PhotoImage(data=base64.b64decode(filenameBase64))
    figura=canvas.create_image(185,50, image=filename)
    canvas.pack()
    aboutVar=StringVar()
    aboutVar2=StringVar()
    label=Label(abresobre, font=45, textvariable=aboutVar, relief=FLAT, justify=CENTER, anchor=CENTER,wraplength=0)
    label2=Label(abresobre, textvariable=aboutVar2, justify=CENTER, anchor=CENTER,wraplength=0)
    aboutVar.set("SOBRE")
    aboutVar2.set("Programa multi-plataforma escrito totalmente em Python, livre de codigo\n aberto, para grava, editar e  compartilhar.\n\n Se encontrar um erro ou tiver uma sugestão, por favor\n envie para marcos.silvadeveloper@gmail.com.\n\n Desenvolvido por Marcos Silva (Sr.Aragones).\n O SSH Teste v0.1, foi baseado por Tkinter GUI, Requests e Paramiko\n")
    label.pack()
    label2.pack()
    # Esse comando remover maximizador do programa
    abresobre.attributes("-toolwindow", 1)
    abresobre.resizable(0,0)
    #command ddestroy para fechar a carpeta
    botaoOK=tkinter.Button(abresobre, text = "OK", command = abresobre.destroy)
    botaoOK.pack()
    abresobre.mainloop()
    
    '''abresobre=Toplevel(gui)
    class imagemsobre:
        def __init__(self, master):
            canvas=tkinter.Canvas(master)
            canvas.grid(row=0, column=0)
            figura=tkinter.PhotoImage(file='./test.gif')
            canvas.create_image(0,0, image=figura)
    imagemsobre=imagemsobre(abresobre)'''


def abrirdoconline():
    print("\nABRINDO DOCUMENTAÇÃO ONLINE.......")
    print("----------------------------------------------------------")
    url="http://aragones.esy.es/SSHTeste/doc.html"
    webbrowser.open(url)

def webSSHUDP():
    print("\nABRINDO PAGINA SSH UDP.......")
    print("----------------------------------------------------------")
    url1="http://sshudp.com"
    webbrowser.open(url1)

def webEvozi():
    print("\nABRINDO PAGINA DA EVOZI.......")
    print("----------------------------------------------------------")
    url2="http://ssh.evozi.com"
    webbrowser.open(url2)

def webFastSSH():
    print("\nABRINDO PAGINA DA FAST SSH.......")
    print("----------------------------------------------------------")
    url3="http://fastssh.com/"
    webbrowser.open(url3)

def webBestvpnssh():
    print("\nABRINDO PAGINA DA BEST VPN SSH.......")
    print("----------------------------------------------------------")
    url4="http://www.bestvpnssh.com/"
    webbrowser.open(url4)

def contassalvaslog():
    print("\nABRINDO TEMPLOG.......")
    print("----------------------------------------------------------")
    #Define o nome do objeto abresobre chama nova janela TopLevel
    ContasLog=Toplevel(gui)
    ContasLog.geometry("700x500")
    ContasLog.title("Pagina Web | SSH Teste v0.1|")
    #ICONE
    ContasLog.iconbitmap("./data/ico")
    class HTMLRender(Text, HTMLParser):
        # Aqui definimos as tags alinhadas:
        __inline = [ "b", "i", "strong" ]
        # Aqui definimos as tags que geram seus próprios blocos
        __block = [ "h1", "h2", "h3", "p", "dl", "dt", "dd" ]

        # Aqui algumas tags comuns em HTML que não vamos renderizar
        __ignore = [ "body", "html", "div" ]

        # Aqui definimos tags que são normalmente deixadas abertas
        __open = [ "dt", "dd", "p", "td" ]
        # Formatos/fontes aplicadas a cada tag:
        __formats = {
            'h1': { 'font': ("Helvetica", "16", "bold"), 'justify': CENTER },
            'h2': { 'font': ("Helvetica", "12", "bold"), 'justify': CENTER },
            'h3': { 'font': ("Helvetica", "10", "bold italic")} ,
            'dt': { 'font': ("Helvetica", "10", "bold") } ,
            'b': { 'font': ("Helvetica", "10", "bold") },
            'i': { 'font': ("Helvetica", "10", "italic") },
            'strong': { 'font': ("Helvetica", "10", "bold italic") },
            'default': { 'font': ("Helvetica", "10"), 'foreground': 'red'  },
            }
        def __init__(self, *cnf, **kw):
            Text.__init__(self, *cnf, **kw)
            HTMLParser.__init__(self)
            self.__last = None
            self.__tags = { }
            self.__index = 0
                        
        def insert(self, text):
            self.feed(text)
        def handle_starttag(self, tag, attr):
            # Se a tag deve ser ignorada, nada deve ser feito.
            if tag in self.__ignore:
                pass
            # Se a tag cria um bloco, inserimos quebras de parágrafo
            # no texto para simular o efeito.
            elif tag in self.__block:
                 if self.__last in self.__open:
                    self.handle_endtag(self.__last)
                    self.__last = tag
                    Text.insert(self, INSERT, "\n\n")
                    # Inserimos a posição da tag no texto no dicionário para
                    # marcarmos a posição em que a formatação deve ser aplicada.
            if tag in self.__tags:
                self.__tags[tag].append(self.index(INSERT))
            else:
                self.__tags[tag] = [ self.index(INSERT) ]

        def handle_data(self, data):
            data = ' '.join(data.split()) + ' '
            Text.insert(self, INSERT, data)

        def handle_endtag(self, tag):
            try:
                start = self.__tags[tag].pop()
                end = self.index(INSERT)
                tag_name = "Tag%05d" % self.__index
                self.__index = self.__index + 1
                self.tag_add(tag_name, start, end)
                self.tag_config(tag_name, **self.__formats[tag])
                return
            except KeyError:
                pass

    text = HTMLRender(ContasLog, font=("Helvetica", "10", ""), wrap=WORD)
    print("Abrindo arquivo temporarios de log templog")
    templog=open('./data/templog', 'r')
    print("Extraindo conteudo das tag..................")
    dadoslidos=templog.read()
    templog.close()
    text.insert(open('./data/templog').read())

    print("Passando para a leitura..........")

    #Barra de rolagem 
    sbContasLog=Scrollbar(ContasLog, orient=VERTICAL, command=text.yview)
    sbContasLog.set
    text.configure(yscrollcommand=sbContasLog.set)

    #Widget
    text.grid(row=1, column=1, sticky=N+W+E+S+SW+NW+SE+NE)
    sbContasLog.grid(row=1, column=2,sticky=N+S)

    #Loop finale
    ContasLog.mainloop()

def incluirDB():
    print("\nINCLUIR AO BANCO DE DADOS.......")
    print("----------------------------------------------------------")
    janelaincluir=Toplevel(gui)
    janelaincluir.geometry("390x500")
    janelaincluir.title("Incluindo ao Banco de Dados  Local/Servidor | SSH Teste v0.1|")
    #ICONE
    fundoImage=tkinter.PhotoImage(file='./teste.gif')

    janelaincluir.iconbitmap("./data/ico")
    janelaincluir.resizable(0,0)

    

    
    
    

    
    
    #canvasr=tkinter.Canvas(janelaincluir, height=550, width=540)
    #canvasr.pack()
    #coord=250,260
    #fundoJanela=canvasr.create_image(coord, anchor=CENTER, image=fundoImage)
    tituloIn=("Incluir dados Local/Servidor")
    tituloIncDB=LabelFrame(janelaincluir, text=tituloIn)
    #fundoImage.grid(row=0, column=0)
    tituloIncDB.pack(fill="both", expand="yes")
    
    LabHostname=Label(tituloIncDB, text="HostName")
    #fundoImage.grid(row=0, column=0)
    LabHostname.pack(side=TOP)

    DadosHostname=StringVar()
    DadosHostname.set
    EnHostname=Entry(tituloIncDB, bd= 5)
    EnHostname.pack(side=TOP)
    EnHostname.focus_set()
    
    
    LabUsuario=Label(tituloIncDB, text="Usuario")
    LabUsuario.pack(side=TOP)
    
    EnUsuario=Entry(tituloIncDB, bd= 5)
    EnUsuario.pack(side=TOP)
    
    LabSenha=Label(tituloIncDB, text="\nSenha")
    LabSenha.pack(side=TOP)
    
    EnSenha=Entry(tituloIncDB, bd= 5)
    EnSenha.pack(side=TOP)
    
    LabSenha=Label(tituloIncDB, text="\nValidade")
    LabSenha.pack(side=TOP)
    
    EnValidade=Entry(tituloIncDB, bd= 5)
    EnValidade.pack(side=TOP)

    
    frame1 = ttk.Frame()

    frame1.pack(expand=True, fill=Tkinter.BOTH, side=Tkinter.LEFT)

    barradeprogresso1 = ttk.Progressbar(tituloIncDB, orient='horizontal', mode='determinate')

    barradeprogresso1.pack(expand=True, fill=Tkinter.BOTH, side=Tkinter.LEFT)
    

    def salvaLocal():
        print("SALVANDO DADOS LOCAL")
        print("--------------------------------------------------")
        dadosHostnameIn=(EnHostname.get())
        print(type(dadosHostnameIn))
        dadosHostnameIn=dadosHostnameIn.split(" ")
        dadosUsuarioIn=(EnUsuario.get())
        print(dadosUsuarioIn)
        dadosUsuarioIn=dadosUsuarioIn.split(" ")
        dadosSenhaIn=(EnSenha.get())
        print(dadosSenhaIn)
        dadosSenhaIn=dadosSenhaIn.split(" ")
        dadosValidadeIn=(EnValidade.get())
        temp1=open('./data/tempLocal.html', "a", encoding='iso-8859-1')
        temp1.write("""
<HTML>
<HEAD>

    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <title>|SSH teste|</title>
    <META name="description" content="|SSH Teste Software Open Source|">
    <META name="keywords" content="SSH Teste Software programa de codigo aberto">
    <META name="revisit-after" content="1days">
    <META name="robots" content="index, follow">

<style type="text/css">
	body,td			{ font-family: arial, helvetica; color: #434343; font-size: 12px; }
	

	A:link			{ text-decoration: none; color: #2244ee; }
	A:visited		{ text-decoration: none; color: #2244ee; }
	A:hover			{ text-decoration: underline; }

	.hidden			{ font-size: 8px; font-weight: bold; color: #ffffff; }
	A:link.hidden		{ text-decoration: none; color: #ffffff; }
	A:visited.hidden	{ text-decoration: none; color: #ffffff; }
	A:hover.hidden		{ text-decoration: none; color: #ffffff; }

	.small			{ font-size: 10px; }

	.emph			{ font-weight: bold; }
	table                   { float:left;}
</style>


</HEAD>

<BODY BGCOLOR="FFFFFF" TEXT="000000" LINK="0000FF" VLINK="0000FF" Marginwidth=0 marginheight=0 leftmargin=0 topmargin=0>


<TABLE BORDER=0 WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>
<TR><TD BGCOLOR=000000 width=100% height=3 colspan=2><IMG SRC="dot.gif" border=0 width=1 height=3></TD></TR>

<TR>
<TD width=150 BGCOLOR=8A8A8A><IMG SRC="logo.png" border=0 width=64 height=64></TD>
<TD VALIGN=top BGCOLOR=8A8A8A>
<CENTER></cENTER>

</TD>
</TR>

<TR><TD BGCOLOR=000000 width=100% colspan=2>
<FONT SIZE=2 COLOR=WHITE><CENTER>
<A HREF="http://aragones.esy.es/SSHTeste/index.html"><FONT SIZE=2 COLOR=WHITE><B>Inicio</B></FONT></A> | 
<A HREF="http://aragones.esy.es/SSHTeste/news.html"><FONT SIZE=2 COLOR=WHITE><B>Noticias</B></FONT></A> |
<A HREF="http://aragones.esy.es/SSHTeste/modulos.html"><FONT SIZE=2 COLOR=WHITE><B>Modulos</B></FONT></A> |
<A HREF="http://aragones.esy.es/SSHTeste/doc.html"><FONT SIZE=2 COLOR=WHITE><B>Documentação</B></FONT></A> |
<A HREF="https://sourceforge.net/projects/ssh-teste/"><FONT SIZE=2 COLOR=WHITE><B>Download</B></FONT></A> |
<A HREF="http://aragones.esy.es/SSHTeste/sobre.htm"><FONT SIZE=2 COLOR=WHITE><B>Sobre</B></FONT></A> |
</CENTER></FONT>
</TD></TR>

</TABLE>
<BR>



<TABLE BORDER=0 WIDTH=98% ALIGN=CENTER>
<TR>

<TD VALIGN=top Width=75%>

<FONT><B>Dados Locais salvos</B></FONT><BR><BR>

<FONT SIZE=2>

""")
        temp1.write("""<table class="tabelaum" border="1"><td>HOSTNAMES                             </td""")
        for a in list(dadosHostnameIn):
            temp1.write("<tr><td>%s</td></tr>" % a)
        temp1.write("</table>")
        temp1.write('<table class="tabeladois" border="1"><td>USUARIO                               </td>')
        for b in list(dadosUsuarioIn):
            temp1.write("<tr><td>%s</td></tr>" % b)
        temp1.write("</table>")
        temp1.write("""<table class="tabelatres" border="1"><td>SENHA                               </td>""")
        for c in list(dadosSenhaIn):
            temp1.write("<tr><td>%s</td></tr>" % c)
        temp1.write("</table>")
        temp1.write("""
</TR>

<BR><BR>

</table>


<BR><BR>

</FONT>

</TD>

<TD VALIGN=top width=20%>
<!--
<CENTER><FONT><B>Sponsors</B></FONT></CENTER><BR>

<FONT SIZE=2>
<--
<A HREF="">Text Ad 1</a> - Small text ad, or promotional text here.<BR>
<FONT SIZE=1><A HREF=""><B>Read more here....</B></A></FONT>
<BR><BR>

<A HREF="">Text Ad 2</a> - Small text ad, or promotional text here.<BR>
<FONT SIZE=1><A HREF=""><B>Read more here....</B></A></FONT>
<BR><BR>

<A HREF="">Text Ad 3</a> - Small text ad, or promotional text here.<BR>
<FONT SIZE=1><A HREF=""><B>Read more here....</B></A></FONT>
<BR><BR>

</FONT>
-->

</TD>

<TR></TABLE>







<BR>
<TABLE BORDER=0 WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>

<TR><TD BGCOLOR=000000 width=100% colspan=2>
<FONT SIZE=2 COLOR=WHITE><CENTER>
<!--
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link1</B></FONT></A> | 
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link2</B></FONT></A> |
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link3</B></FONT></A> |
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link4</B></FONT></A> |
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link5</B></FONT></A> |
<A HREF=""><FONT SIZE=2 COLOR=WHITE><B>Link6</B></FONT></A> |
</CENTER></FONT>
</TD></TR>
-->
<TR>
<TD width=150 BGCOLOR=8A8A8A><IMG SRC="logo.png" border=0 width=32 height=32></TD>
<TD VALIGN=top BGCOLOR=8A8A8A>
<CENTER></cENTER>

</TD>
</TR>

<TR><TD BGCOLOR=000000 width=100% height=3 colspan=2><IMG SRC="dot.gif" border=0 width=1 height=3></TD></TR>

</TABLE>

<CENTER>
<FONT SIZE=2>
© 2016 <i>SSH Teste</i> <A HREF="http://aragones.esy.es/">AragonesNets</a>.
</FONT>
</CENTER>
</HTML>

""")
        temp1.close()
        print("\nPAGINA SALVA EM .../data/tempLocal.html")
        print("--------------------------------------------------------")
        mensagem6=("Pagina salva em /data/tempLocal.html")
        messagebox.showinfo("Alerta: Sucesso", (mensagem6))
        #barraFuncao()
        barradeprogresso1.step(99.999999)
        

        


        

    def EnviarServer():
        try:
            #print(type(EnUsuario.get()))
            dadosHostname=(EnHostname.get())
            dadosUsuario=(EnUsuario.get())
            dadosSenha=(EnSenha.get())
            dadosValidade=(EnValidade.get())
            rg=requests.get("http://aragones.esy.es")
            status=rg.status_code

            def dadosHostnameFalha():
                #Define o nome do objeto dadosHostnameFalhaGUI chama nova janela TopLevel

                mensagem6=("Falta completar o campo *Hostname*.")
                messagebox.showinfo("Alerta: Falha", (mensagem6))
                """
            dadosHostnameFalhaGUI=Toplevel(gui)
            dadosHostnameFalhaGUI.geometry("250x100")
            dadosHostnameFalhaGUI.title("Alerta: Falha")
            dadosHostnameFalhaGUI.attributes("-toolwindow", 1)
            dadosHostnameFalhaGUI.resizable(0,0)
            #ICONE
            dadosHostnameFalhaGUI.iconbitmap("./data/ico")
            dadosHostnameFalhaGUIVar=StringVar()
            dadosHostnameFalhaGUIVar2=StringVar()
            dadosHostnameFalhaGUI_label=Label(dadosHostnameFalhaGUI, font=45, textvariable=dadosHostnameFalhaGUIVar, relief=FLAT, justify=CENTER, anchor=CENTER,wraplength=0)
            dadosHostnameFalhaGUI_label2=Label(dadosHostnameFalhaGUI, textvariable=dadosHostnameFalhaGUIVar2, justify=CENTER, anchor=CENTER, wraplength=0)
            dadosHostnameFalhaGUIVar.set("ALERTA:")
            dadosHostnameFalhaGUIVar2.set("Falta completar o campo *Hostname*.\n")
            dadosHostnameFalhaGUI_label.pack()
            dadosHostnameFalhaGUI_label2.pack()
            #command ddestroy para fechar a capeta
            botaodadosHostnameFalhaGUI_OK=tkinter.Button(dadosHostnameFalhaGUI, text = "OK", command = dadosHostnameFalhaGUI.destroy)
            botaodadosHostnameFalhaGUI_OK.pack()
            dadosHostnameFalhaGUI.mainloop()
            """
            def dadosUsuarioFalha():

                mensagem7=("Falta completar o campo *Usuario*.")
                messagebox.showinfo("Alerta: Falha", (mensagem7))

                """
            
            #Define o nome do objeto dadosUsuarioFalhaGUI chama nova janela TopLevel
            dadosUsuarioFalhaGUI=Toplevel(gui)
            dadosUsuarioFalhaGUI.geometry("250x100")
            dadosUsuarioFalhaGUI.title("ALERTA: Falha")
            dadosUsuarioFalhaGUI.attributes("-toolwindow", 1)
            dadosUsuarioFalhaGUI.resizable(0,0)
            #ICONE
            dadosUsuarioFalhaGUI.iconbitmap("./data/ico")
            dadosUsuarioFalhaGUIVar=StringVar()
            dadosUsuarioFalhaGUIVar2=StringVar()
            dadosUsuarioFalhaGUI_label=Label(dadosUsuarioFalhaGUI, font=45, textvariable=dadosUsuarioFalhaGUIVar, relief=FLAT, justify=CENTER, anchor=CENTER,wraplength=0)
            dadosUsuarioFalhaGUI_label2=Label(dadosUsuarioFalhaGUI, textvariable=dadosUsuarioFalhaGUIVar2, justify=CENTER, anchor=CENTER, wraplength=0)
            dadosUsuarioFalhaGUIVar.set("ALERTA:")
            dadosUsuarioFalhaGUIVar2.set("Falta completar o campo *Usuario*.\n")
            dadosUsuarioFalhaGUI_label.pack()
            dadosUsuarioFalhaGUI_label2.pack()
            #command ddestroy para fechar a capeta
            botaodadosUsuarioFalhaGUI_OK=tkinter.Button(dadosUsuarioFalhaGUI, text = "OK", command = dadosUsuarioFalhaGUI.destroy)
            botaodadosUsuarioFalhaGUI_OK.pack()
            dadosUsuarioFalhaGUI.mainloop()
            """

            def dadosSenhaFalha():
                mensagem8=("Falta completar o campo *Senha*.")
                messagebox.showinfo("Alerta: Falha", (mensagem8))

            """
            
            #Define o nome do objeto dadosSenhaFalhaGUI chama nova janela TopLevel
            dadosSenhaFalhaGUI=Toplevel(gui)
            dadosSenhaFalhaGUI.geometry("250x100")
            dadosSenhaFalhaGUI.title("ALERTA: Falha")
            dadosSenhaFalhaGUI.attributes("-toolwindow", 1)
            dadosSenhaFalhaGUI.resizable(0,0)
            #ICONE
            dadosSenhaFalhaGUI.iconbitmap("./data/ico")
            dadosSenhaFalhaGUIVar=StringVar()
            dadosSenhaFalhaGUIVar2=StringVar()
            dadosSenhaFalhaGUI_label=Label(dadosSenhaFalhaGUI, font=45, textvariable=dadosSenhaFalhaGUIVar, relief=FLAT, justify=CENTER, anchor=CENTER,wraplength=0)
            dadosSenhaFalhaGUI_label2=Label(dadosSenhaFalhaGUI, textvariable=dadosSenhaFalhaGUIVar2, justify=CENTER, anchor=CENTER, wraplength=0)
            dadosSenhaFalhaGUIVar.set("ALERTA:")
            dadosSenhaFalhaGUIVar2.set("Falta completar o campo *Senha*.\n")
            dadosSenhaFalhaGUI_label.pack()
            dadosSenhaFalhaGUI_label2.pack()
            #command ddestroy para fechar a capeta
            botaodadosSenhaFalhaGUI_OK=tkinter.Button(dadosSenhaFalhaGUI, text = "OK", command = dadosSenhaFalhaGUI.destroy)
            botaodadosSenhaFalhaGUI_OK.pack()
            dadosSenhaFalhaGUI.mainloop()
            """

            def dadosValidadeFalha():

                mensagem9=("Falta completar o campo *Validade*.")
                messagebox.showinfo("Alerta: Falha", (mensagem9))

                """
            
            #Define o nome do objeto dadosValidadeFalhaGUI chama nova janela TopLevel
            dadosValidadeFalhaGUI=Toplevel(gui)
            dadosValidadeFalhaGUI.geometry("250x100")
            dadosValidadeFalhaGUI.title("ALERTA: Falha")
            dadosValidadeFalhaGUI.attributes("-toolwindow", 1)
            dadosValidadeFalhaGUI.resizable(0,0)
            #ICONE
            dadosValidadeFalhaGUI.iconbitmap("./data/ico")
            dadosValidadeFalhaGUIVar=StringVar()
            dadosValidadeFalhaGUIVar2=StringVar()
            dadosValidadeFalhaGUI_label=Label(dadosValidadeFalhaGUI, font=45, textvariable=dadosValidadeFalhaGUIVar, relief=FLAT, justify=CENTER, anchor=CENTER,wraplength=0)
            dadosValidadeFalhaGUI_label2=Label(dadosValidadeFalhaGUI, textvariable=dadosValidadeFalhaGUIVar2, justify=CENTER, anchor=CENTER, wraplength=0)
            dadosValidadeFalhaGUIVar.set("ALERTA:")
            dadosValidadeFalhaGUIVar2.set("Falta completar o campo *Validade*.\n")
            dadosValidadeFalhaGUI_label.pack()
            dadosValidadeFalhaGUI_label2.pack()
            #command ddestroy para fechar a capeta
            botaodadosValidadeFalhaGUI_OK=tkinter.Button(dadosValidadeFalhaGUI, text = "OK", command = dadosValidadeFalhaGUI.destroy)
            botaodadosValidadeFalhaGUI_OK.pack()
            dadosValidadeFalhaGUI.mainloop()

            """

            def espaçosBranco():
                mensagem30=("Não deixe espaço em branco .")
                messagebox.showinfo("Alerta: Falha", (mensagem30))

            def enviandoDados():
                try:
                    
                    print("\nENVIANDO DADOS AO SERVIDOR.......")
                    print("----------------------------------------------------------")
                    #barradeprogressoEnv.start(70)
                    print("\nHOSTNAME: %s, \nUSUARIO: %s \nSENHA: %s \nVALIDADE: %s"% (dadosHostname, dadosUsuario, dadosSenha, dadosValidade))
                    enviar=requests.get("http://aragones.esy.es/ContasSSHFree/dados.php?host=%s&usuario=%s&senha=%s&validade=%s" % (dadosHostname, dadosUsuario, dadosSenha, dadosValidade))
                    #barradeprogressoEnv.start(100)
                    print("\nDADOS ENVIADOS: STATUS %s"% (enviar))
                    mensagem10=("Dados enviados \n\nHOSTNAME: %s, \nUSUARIO: %s \nSENHA: %s \nVALIDADE: %s"% (dadosHostname, dadosUsuario, dadosSenha, dadosValidade))
                    messagebox.showinfo("Alerta: Sucesso", (mensagem10))
                except requests.exceptions.ConnectionError:
                    print("CONEXÃO NÃO ESTABELECIDA, CONFIRA O CONSOLE OU SUA CONEXÃO COM A INTERNET ")
                
                    mensagem11=("Conexão não estabelecida. Confira o console ou a sua conexão com a internet.")
                    messagebox.showinfo("Alerta: Falha", (mensagem11))

        
            if dadosHostname == "":
                print("\nFalta completar o campo *Hostname*")
                dadosHostnameFalha()
            elif dadosUsuario == "":
                print("\nFalta completar o campo *Usuario*")
                dadosUsuarioFalha()
            elif dadosHostname==" ":
                print("\nNão insira espaços em branco no campo")
                espaçosBranco()
            elif dadosUsuario==" ":
                print("\nNão insira espaços em branco no campo")
                espaçosBranco()
            elif dadosSenha==" ":
                print("\nNão insira espaços em branco no campo")
                espaçosBranco()
            elif dadosValidade==" ":
                print("\nNão insira espaços em branco no campo")
                espaçosBranco()
            elif dadosSenha == "":
                print("\nFalta completar o campo *Senha*")
                dadosSenhaFalha()
            elif dadosValidade =="":
                print("\nFalta completar o campo *Validade*")
                dadosValidadeFalha()
            elif status!=200:
                print("\nCONEXÃO NÃO ESTABELECIDA: STATUS %d" % (status))
                mensagem12=("Conexão não estabelecida: Status %d ." % status)
                messagebox.showinfo("Alerta: Falha", (mensagem12))
            
            else:
            
                enviandoDados()
                barradeprogresso.step(99.999999)
        except:
            mensagem13=("Conexão não estabelecida. Algo impediu a execução da função, por favor tente novamente ou verifique o console.")
            messagebox.showinfo("Alerta: Falha", (mensagem13))


    

    #barraFuncao()
    bottomframe = Frame(janelaincluir)
    bottomframe.pack(side = BOTTOM)
    texto1="Salvar Dados Locais"
    botaoInc1=Button(bottomframe, text=texto1, fg="black", command=salvaLocal)
    botaoInc1.pack(side=LEFT)

    texto2="Enviar ao servidor"
    botaoInc2=Button(bottomframe, text=texto2, fg="black", command= EnviarServer)
    botaoInc2.pack(side=LEFT)

    texto3="Consultar dados Local"
    botaoInc3=Button(bottomframe, text=texto3, fg="red")
    botaoInc3.pack(side=LEFT)
    

    

    
    



    
    
    

    janelaincluir.mainloop()
    
    
    


def verificarServerSSH():
    print("\nVERIFICAR SERVIDOR SSH")
    print("--------------------------------------------------------")
    verificarServerSSHGUI = Toplevel(gui)
    verificarServerSSHGUI.title("Verificar servidor SSH | SSH Teste v0.1")
    verificarServerSSHGUI.geometry("390x500")
    verificarServerSSHGUI.iconbitmap("./data/ico")
    verificarServerSSHGUI.resizable(0,0)

    tituloVe=("Verificar conectividade de servidor SSH")
    tituloVeSS=LabelFrame(verificarServerSSHGUI, text=tituloVe)
    tituloVeSS.pack(fill='both', expand='yes')

    DadosHostnameVS=StringVar()
    DadosHostnameVS.set
    LabHostnameVS=Label(tituloVeSS, text='Hostname')
    LabHostnameVS.pack(side=TOP)
    EnHostnameVS=Entry(tituloVeSS, bd=5)
    EnHostnameVS.pack(side=TOP)
    EnHostnameVS.focus_set()

    LabUsuarioVS=Label(tituloVeSS, text='Usuario')
    LabUsuarioVS.pack(side=TOP)

    EnUsuarioVS=Entry(tituloVeSS, bd=5)
    EnUsuarioVS.pack(side=TOP)

    LabSenhaVS=Label(tituloVeSS, text='Senha')
    LabSenhaVS.pack(side=TOP)

    EnSenhaVS=Entry(tituloVeSS, bd=5)
    EnSenhaVS.pack(side=TOP)

    ValorHostname=(EnHostnameVS.get())
    ValorUsuario=(EnUsuarioVS.get())
    ValorSenha=(EnSenhaVS.get())

    
    

    

    button = Button(verificarServerSSHGUI, text="Do nothing button")
    button.pack()

   #verificarServerSSHGUI.mainloop()



def donothing():
   verificarServerSSHGUI = Toplevel(gui)
   button = Button(verificarServerSSHGUI, text="Do nothing button")
   button.pack()


#Definindo o tipo e nome do menu barra
#Menu Opções ****************************************************************
menubar=Menu(gui)

opçõesmenu=Menu(menubar, tearoff=0)

#Defindo as opções do menu "Opções"
opçõesmenu.add_command(label="Consultar o banco de dados", command=consultaBD)
opçõesmenu.add_command(label="Incluir ao banco de dados", command=incluirDB)
opçõesmenu.add_command(label="Verificar servidor SSH", command=verificarServerSSH)

#Adicionando separador
opçõesmenu.add_separator()

opçõesmenu.add_command(label="Sair", command=gui.destroy)
#Definindo Cascamento Opções
menubar.add_cascade(label="Opções", menu=opçõesmenu)

#Menu SSH Free****************************************************************
sshfree=Menu(menubar, tearoff=0)
#Definindo as opções do menu "SSH FREE"
sshfree.add_command(label="Fast SSH", command=webFastSSH)
sshfree.add_command(label="BestVpnSSH", command=webBestvpnssh)
sshfree.add_command(label="SSHUDP", command=webSSHUDP)
sshfree.add_command(label="Evozi", command=webEvozi)

#Definindo casqueamento SSH FREE
menubar.add_cascade(label="SSH Free", menu=sshfree)

#Menu contas salvas***********************************************************
contassalva=Menu(menubar, tearoff=0)
#Definindo as opções do menu "Contas salva"
contassalva.add_command(label="Contas salvas", command=contassalvaslog)

#Definindo casqueamento Contas Salva
menubar.add_cascade(label="Contas Salva (Log)", menu=contassalva)

#Menu Ajuda*******************************************************************
ajudamenu=Menu(menubar, tearoff=0)
#Definindo as opções do menu "Ajuda"
ajudamenu.add_command(label="Documentação Online", command=abrirdoconline)
ajudamenu.add_command(label="Documentação Offline", command=donothing)

#Definindo cascade Ajuda
menubar.add_cascade(label="Ajuda", menu=ajudamenu)

#Menu Sobre *******************************************************************
sobremenu=Menu(menubar, tearoff=0)
#Definindo opções do menu Sobre
sobremenu.add_command(label="Sobre o desenvolvedor", command=sobreDados)

#Definindo cascade Sobre
menubar.add_cascade(label="Sobre", menu=sobremenu)


gui.config(menu=menubar)
gui.mainloop()

